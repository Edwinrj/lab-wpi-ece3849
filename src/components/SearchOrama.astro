---
import { useState } from "astro/jsx-runtime";

const [query, setQuery] = useState("");
const [open, setOpen] = useState(false);
const [results, setResults] = useState([]);

async function runSearch() {
  if (!query.trim()) {
    setResults([]);
    setOpen(false);
    return;
  }

  const res = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
  const data = await res.json();
  setResults(data);
  setOpen(true);
}

function handleInput(e: any) {
  const value = e.target.value;
  setQuery(value);
  if (!value.trim()) {
    setResults([]);
    setOpen(false);
  }
}
---

<div class="sl-search-wrapper">
  <div class="sl-search-bar">
    <input
      class="sl-search-input"
      type="search"
      placeholder="Search docs..."
      value={query}
      onInput={handleInput}
      onKeyDown={(e) => e.key === "Enter" && runSearch()}
    />
    <button class="sl-search-button" onClick={runSearch}>
      <svg class="sl-icon" viewBox="0 0 20 20" fill="currentColor">
        <path
          fill-rule="evenodd"
          d="M13.293 14.707a8 8 0 111.414-1.414l3.293 3.293a1 1 0 01-1.414 1.414l-3.293-3.293zM8 14a6 6 0 100-12 6 6 0 000 12z"
          clip-rule="evenodd"
        />
      </svg>
    </button>
  </div>

  {open && results.length > 0 && (
    <div class="sl-search-results">
      <ul>
        {results.map((r) => (
          <li class="sl-search-result">
            <a href={r.url} class="sl-result-link" onClick={() => setOpen(false)}>
              <div class="sl-result-title">{r.title}</div>
              <div class="sl-result-snippet">{r.content.slice(0, 120)}...</div>
            </a>
          </li>
        ))}
      </ul>
    </div>
  )}

  {open && results.length === 0 && (
    <div class="sl-search-results sl-empty">
      <div class="sl-no-results">No results found.</div>
    </div>
  )}
</div>

<style>
  .sl-search-wrapper { position: relative; width: 16rem; }
  .sl-search-bar {
    display: flex;
    align-items: center;
    background: var(--sl-color-bg-nav, var(--color-bg, #1a1a1a));
    border: 1px solid var(--sl-color-hairline, #444);
    border-radius: 0.5rem;
    padding: 0.3rem 0.5rem;
    gap: 0.4rem;
  }
  .sl-search-input {
    flex: 1;
    background: transparent;
    color: var(--sl-color-text, #fff);
    border: none;
    outline: none;
  }
  .sl-search-button {
    background: transparent;
    border: 0;
    cursor: pointer;
    color: var(--sl-color-text, #fff);
  }
  .sl-icon { width: 1rem; height: 1rem; }
  .sl-search-results {
    position: absolute;
    top: calc(100% + 0.4rem);
    background: var(--sl-color-bg-overlay, #222);
    border: 1px solid var(--sl-color-hairline, #444);
    border-radius: 0.5rem;
    box-shadow: 0 8px 16px rgba(0,0,0,0.5);
    max-height: 18rem;
    overflow-y: auto;
    z-index: 1000;
  }
  .sl-result-link {
    display: block;
    padding: 0.5rem;
    text-decoration: none;
    color: var(--sl-color-text, #fff);
  }
  .sl-result-link:hover {
    background: rgba(255,255,255,0.05);
  }
  .sl-result-title { font-weight: 600; }
  .sl-result-snippet { font-size: 0.8rem; opacity: 0.8; }
  :root[data-theme="light"] .sl-search-bar {
    background: #fff;
    color: #000;
    border-color: #ccc;
  }
</style>

---
import { useState } from "astro/jsx-runtime";

// estado reactivo local del input y resultados
const [query, setQuery] = useState("");
const [open, setOpen] = useState(false);
const [results, setResults] = useState([]);

// funci√≥n que dispara la b√∫squeda
async function runSearch() {
  if (!query.trim()) {
    setResults([]);
    setOpen(false);
    return;
  }

  const res = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
  const data = await res.json();
  setResults(data);
  setOpen(true);
}

// cerrar dropdown si el usuario borra todo
function handleInput(e: any) {
  const value = e.target.value;
  setQuery(value);
  if (!value.trim()) {
    setResults([]);
    setOpen(false);
  }
}
---


<div class="sl-search-wrapper">
  <div class="sl-search-bar">
    <input
      class="sl-search-input"
      type="search"
      placeholder="Search docs‚Ä¶"
      value={query}
      onInput={handleInput}
      onKeyDown={(e) => {
        if (e.key === "Enter") {
          runSearch();
        }
      }}
    />
    <button class="sl-search-button" onClick={runSearch}>
      <span class="sl-search-icon">üîç</span>
    </button>
  </div>

  {open && results.length > 0 && (
    <div class="sl-search-results">
      <ul>
        {results.map((r) => (
          <li class="sl-search-result">
            <a href={r.url} class="sl-result-link" onClick={() => setOpen(false)}>
              <div class="sl-result-title">{r.title}</div>
              <div class="sl-result-snippet">
                {r.content.slice(0, 120)}‚Ä¶
              </div>
            </a>
          </li>
        ))}
      </ul>
    </div>
  )}

  {open && results.length === 0 && (
    <div class="sl-search-results sl-empty">
      <div class="sl-no-results">No results.</div>
    </div>
  )}
</div>

<style>
  /* Wrapper general que imita un dropdown bajo el header */
  .sl-search-wrapper {
    position: relative;
    display: flex;
    flex-direction: column;
    max-width: 22rem;
    width: 100%;
    font-size: 0.9rem;
  }

  /* Barra input + bot√≥n */
  .sl-search-bar {
    display: flex;
    align-items: center;
    background: var(--sl-color-bg-nav, var(--color-bg, #1a1a1a));
    border: 1px solid var(--sl-color-hairline, #444);
    border-radius: 0.5rem;
    padding: 0.4rem 0.6rem;
    gap: 0.4rem;
  }

  .sl-search-input {
    flex: 1;
    background: transparent;
    color: var(--sl-color-text, var(--color-text, #fff));
    border: none;
    outline: none;
    font-size: 0.9rem;
  }

  .sl-search-button {
    background: transparent;
    border: 0;
    color: var(--sl-color-text-accent, var(--color-text, #fff));
    cursor: pointer;
    font-size: 0.9rem;
    line-height: 1;
    display: grid;
    place-items: center;
  }

  .sl-search-icon {
    opacity: 0.8;
  }

  /* Dropdown resultados */
  .sl-search-results {
    position: absolute;
    top: calc(100% + 0.4rem);
    right: 0;
    left: 0;
    background: var(--sl-color-bg-overlay, #222);
    border: 1px solid var(--sl-color-hairline, #444);
    border-radius: 0.5rem;
    box-shadow: 0px 16px 32px rgba(0,0,0,0.6);
    max-height: 18rem;
    overflow-y: auto;
    z-index: 9999;
    padding: 0.5rem 0;
  }

  .sl-search-results ul {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .sl-search-result {
    padding: 0.5rem 0.75rem;
  }

  .sl-result-link {
    color: inherit;
    text-decoration: none;
    display: block;
  }

  .sl-result-link:hover {
    background: rgba(255,255,255,0.05);
    border-radius: 0.4rem;
  }

  .sl-result-title {
    font-weight: 600;
    font-size: 0.9rem;
    color: var(--sl-color-text-accent, #fff);
    margin-bottom: 0.25rem;
  }

  .sl-result-snippet {
    font-size: 0.8rem;
    line-height: 1.3;
    color: var(--sl-color-text-dim, #aaa);
  }

  .sl-empty {
    text-align: center;
    color: var(--sl-color-text-dim, #999);
    font-size: 0.8rem;
    padding: 1rem;
  }

  .sl-no-results {
    opacity: 0.8;
  }

  /* Peque√±as variables defensivas en caso de tema claro */
  :root[data-theme="light"] .sl-search-bar {
    background: var(--sl-color-bg-nav, #fff);
    border-color: var(--sl-color-hairline, #ccc);
  }

  :root[data-theme="light"] .sl-search-input {
    color: #000;
  }

  :root[data-theme="light"] .sl-search-results {
    background: var(--sl-color-bg-overlay, #fff);
    border-color: var(--sl-color-hairline, #ccc);
    box-shadow: 0px 16px 32px rgba(0,0,0,0.12);
  }

  :root[data-theme="light"] .sl-result-title {
    color: #000;
  }

  :root[data-theme="light"] .sl-result-snippet {
    color: #444;
  }
</style>
